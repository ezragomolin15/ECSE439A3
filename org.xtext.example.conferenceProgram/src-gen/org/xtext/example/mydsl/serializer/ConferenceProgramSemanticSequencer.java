/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.conferenceProgram.CoffeBreak;
import org.xtext.example.mydsl.conferenceProgram.ConferenceProgram;
import org.xtext.example.mydsl.conferenceProgram.ConferenceProgramPackage;
import org.xtext.example.mydsl.conferenceProgram.DemoAndPoster;
import org.xtext.example.mydsl.conferenceProgram.GoogleMapsDirections;
import org.xtext.example.mydsl.conferenceProgram.IndustryPaper;
import org.xtext.example.mydsl.conferenceProgram.Keynote;
import org.xtext.example.mydsl.conferenceProgram.Location;
import org.xtext.example.mydsl.conferenceProgram.Lunch;
import org.xtext.example.mydsl.conferenceProgram.Panel;
import org.xtext.example.mydsl.conferenceProgram.ResearchPaper;
import org.xtext.example.mydsl.conferenceProgram.Room;
import org.xtext.example.mydsl.conferenceProgram.Session;
import org.xtext.example.mydsl.conferenceProgram.SocialEvent;
import org.xtext.example.mydsl.conferenceProgram.Track;
import org.xtext.example.mydsl.services.ConferenceProgramGrammarAccess;

@SuppressWarnings("all")
public class ConferenceProgramSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConferenceProgramGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ConferenceProgramPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ConferenceProgramPackage.COFFE_BREAK:
				sequence_CoffeBreak(context, (CoffeBreak) semanticObject); 
				return; 
			case ConferenceProgramPackage.CONFERENCE_PROGRAM:
				sequence_ConferenceProgram(context, (ConferenceProgram) semanticObject); 
				return; 
			case ConferenceProgramPackage.DEMO_AND_POSTER:
				sequence_DemoAndPoster(context, (DemoAndPoster) semanticObject); 
				return; 
			case ConferenceProgramPackage.GOOGLE_MAPS_DIRECTIONS:
				sequence_GoogleMapsDirections(context, (GoogleMapsDirections) semanticObject); 
				return; 
			case ConferenceProgramPackage.INDUSTRY_PAPER:
				sequence_IndustryPaper(context, (IndustryPaper) semanticObject); 
				return; 
			case ConferenceProgramPackage.KEYNOTE:
				sequence_Keynote(context, (Keynote) semanticObject); 
				return; 
			case ConferenceProgramPackage.LOCATION:
				sequence_Location(context, (Location) semanticObject); 
				return; 
			case ConferenceProgramPackage.LUNCH:
				sequence_Lunch(context, (Lunch) semanticObject); 
				return; 
			case ConferenceProgramPackage.PANEL:
				sequence_Panel(context, (Panel) semanticObject); 
				return; 
			case ConferenceProgramPackage.RESEARCH_PAPER:
				sequence_ResearchPaper(context, (ResearchPaper) semanticObject); 
				return; 
			case ConferenceProgramPackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case ConferenceProgramPackage.SESSION:
				sequence_Session(context, (Session) semanticObject); 
				return; 
			case ConferenceProgramPackage.SOCIAL_EVENT:
				sequence_SocialEvent(context, (SocialEvent) semanticObject); 
				return; 
			case ConferenceProgramPackage.TRACK:
				sequence_Track(context, (Track) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CoffeBreak returns CoffeBreak
	 *
	 * Constraint:
	 *     (name=ID startTime=STRING endTime=STRING)
	 * </pre>
	 */
	protected void sequence_CoffeBreak(ISerializationContext context, CoffeBreak semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.COFFE_BREAK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.COFFE_BREAK__NAME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.COFFE_BREAK__START_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.COFFE_BREAK__START_TIME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.COFFE_BREAK__END_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.COFFE_BREAK__END_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoffeBreakAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCoffeBreakAccess().getStartTimeSTRINGTerminalRuleCall_2_0(), semanticObject.getStartTime());
		feeder.accept(grammarAccess.getCoffeBreakAccess().getEndTimeSTRINGTerminalRuleCall_3_0(), semanticObject.getEndTime());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConferenceProgram returns ConferenceProgram
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         date=STRING 
	 *         tracks+=Track+ 
	 *         socialEvents+=SocialEvent* 
	 *         keynotes+=Keynote* 
	 *         coffebreaks+=CoffeBreak* 
	 *         lunches+=Lunch*
	 *     )
	 * </pre>
	 */
	protected void sequence_ConferenceProgram(ISerializationContext context, ConferenceProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DemoAndPoster returns DemoAndPoster
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_DemoAndPoster(ISerializationContext context, DemoAndPoster semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.DEMO_AND_POSTER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.DEMO_AND_POSTER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDemoAndPosterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GoogleMapsDirections returns GoogleMapsDirections
	 *
	 * Constraint:
	 *     url=STRING
	 * </pre>
	 */
	protected void sequence_GoogleMapsDirections(ISerializationContext context, GoogleMapsDirections semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.GOOGLE_MAPS_DIRECTIONS__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.GOOGLE_MAPS_DIRECTIONS__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoogleMapsDirectionsAccess().getUrlSTRINGTerminalRuleCall_2_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IndustryPaper returns IndustryPaper
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_IndustryPaper(ISerializationContext context, IndustryPaper semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.INDUSTRY_PAPER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.INDUSTRY_PAPER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIndustryPaperAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Keynote returns Keynote
	 *
	 * Constraint:
	 *     (name=ID startTime=STRING endTime=STRING)
	 * </pre>
	 */
	protected void sequence_Keynote(ISerializationContext context, Keynote semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.KEYNOTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.KEYNOTE__NAME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.KEYNOTE__START_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.KEYNOTE__START_TIME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.KEYNOTE__END_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.KEYNOTE__END_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeynoteAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getKeynoteAccess().getStartTimeSTRINGTerminalRuleCall_2_0(), semanticObject.getStartTime());
		feeder.accept(grammarAccess.getKeynoteAccess().getEndTimeSTRINGTerminalRuleCall_3_0(), semanticObject.getEndTime());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Location returns Location
	 *
	 * Constraint:
	 *     room=Room
	 * </pre>
	 */
	protected void sequence_Location(ISerializationContext context, Location semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.LOCATION__ROOM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.LOCATION__ROOM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocationAccess().getRoomRoomParserRuleCall_2_0(), semanticObject.getRoom());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lunch returns Lunch
	 *
	 * Constraint:
	 *     (name=ID startTime=STRING endTime=STRING)
	 * </pre>
	 */
	protected void sequence_Lunch(ISerializationContext context, Lunch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.LUNCH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.LUNCH__NAME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.LUNCH__START_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.LUNCH__START_TIME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.LUNCH__END_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.LUNCH__END_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLunchAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLunchAccess().getStartTimeSTRINGTerminalRuleCall_2_0(), semanticObject.getStartTime());
		feeder.accept(grammarAccess.getLunchAccess().getEndTimeSTRINGTerminalRuleCall_3_0(), semanticObject.getEndTime());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Panel returns Panel
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Panel(ISerializationContext context, Panel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.PANEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.PANEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPanelAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ResearchPaper returns ResearchPaper
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_ResearchPaper(ISerializationContext context, ResearchPaper semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.RESEARCH_PAPER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.RESEARCH_PAPER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResearchPaperAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Room returns Room
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.ROOM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.ROOM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoomAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Session returns Session
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         researchpaper+=ResearchPaper* 
	 *         industrypaper+=IndustryPaper* 
	 *         demoandposter+=DemoAndPoster* 
	 *         panel+=Panel* 
	 *         location=Location? 
	 *         startTime=STRING 
	 *         endTime=STRING
	 *     )
	 * </pre>
	 */
	protected void sequence_Session(ISerializationContext context, Session semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SocialEvent returns SocialEvent
	 *
	 * Constraint:
	 *     (name=ID location=Location startTime=STRING endTime=STRING directions=GoogleMapsDirections)
	 * </pre>
	 */
	protected void sequence_SocialEvent(ISerializationContext context, SocialEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__LOCATION));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__START_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__START_TIME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__END_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__END_TIME));
			if (transientValues.isValueTransient(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__DIRECTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConferenceProgramPackage.Literals.SOCIAL_EVENT__DIRECTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSocialEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSocialEventAccess().getLocationLocationParserRuleCall_3_0(), semanticObject.getLocation());
		feeder.accept(grammarAccess.getSocialEventAccess().getStartTimeSTRINGTerminalRuleCall_4_0(), semanticObject.getStartTime());
		feeder.accept(grammarAccess.getSocialEventAccess().getEndTimeSTRINGTerminalRuleCall_5_0(), semanticObject.getEndTime());
		feeder.accept(grammarAccess.getSocialEventAccess().getDirectionsGoogleMapsDirectionsParserRuleCall_6_0(), semanticObject.getDirections());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Track returns Track
	 *
	 * Constraint:
	 *     (name=ID session+=Session+)
	 * </pre>
	 */
	protected void sequence_Track(ISerializationContext context, Track semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
